PAGINACIÓN: estrategia de admin de memoria, basada en frames.
tamaño de marco #=4 (cantidad de celdas x frame) memoria de 16 celdas
cada proceso cargado en paginas, cada pagina asociada a un frames.
instruc/frame size = cant de paginas



Por hacer:

KILL:
le digo al MM, mata al pid 1
y agrego sus frames a la lista de frames libres


-----------------------------------------------------------------------------------


PAGINACION BAJO DEMANDA
    bajo demanda
	si no tiene frame asignado, tirar interruption fallo de pagina
	cargar la pagina, si no hay frame libre, elegir victima y pasarla a disco


    interruption desde el MMU PageFoult(por param que page necesita)

    SWAP esta en MM

Tabla de paginas:
pid	pag	frame   Bit   Swap IdxSwap
1	0	 0       V     S       0
1	1	 -       I     N       -
2	0	 -       I     N       -
2	1	 2       V     N       -




loader -> page table

pageTable -> invalid -> PageFault(page)(del pid running)

pageFault -> cargar pagina en memoria, poner el frame en valido

swap -> in/out (frame)

swap
	pid + frame
	tiempo de carga (tick que fue cargado)


PageTable
	pid
	page
	frame
	valid/invalid (bit)
	swappage en que esta


	swap



